package src;

import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;


/**
 * Highly divisible triangular number
 * 
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * 
 * The first ten terms would be:
 * 
 *         1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 *      1: 1
 *      3: 1,3
 *      6: 1,2,3,6
 *     10: 1,2,5,10
 *     15: 1,3,5,15
 *     21: 1,3,7,21
 *     28: 1,2,4,7,14,28
 * 
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred divisors?
 */
public class Task21 {

    private ArrayList<Long> primes    = new ArrayList<Long>();
    private ArrayList<Long> triangles = new ArrayList<Long>();

    public static void main(String[] args) {
        Task21 t = new Task21();
        t.run();
    }

    private void run() {
        generatePrimes(50000);
        printPrimes();
        // generateTriangles();
        //generateTriangles2();
        //prinTriangles();
    }


    private void factorize(long number) {
        
    }

    private void generatePrimes(long hiBoundary)
    {
        for (long i = 2; i <= hiBoundary; i++) {
            if (! isPrime(i)) {
                continue;
            }
            primes.add(Long.valueOf(i));
        }
    }

    private boolean isPrime(long number)
    {
        long factors = 0L;
        for (long i = 1L; i <= number; i++) {
            factors += (number % i == 0L) ? 1L : 0L;
        }
        return (factors == 2L);
    }

    private void printPrimes()
    {
        long i = 1L;
        for (Long x : primes) {
            System.out.printf("%1$d: %2$d\n", i, x);
            i++;
        }
    }

    private void generateTriangles2()
    {
        // 
    }

    // private void generateTriangles()
    // {
    //     long i        = 1L;
    //     long triangle = 0L;
    //     do {
    //         triangle += i;
    //         triangles.add(Long.valueOf(triangle));
    //         i++;
    //     }
    //     while (! hasOverSpecificNumberOfDivisors(triangle, 5000));        
    // }


    // private boolean hasOverSpecificNumberOfDivisors(long number, int divisorsNumber)
    // {
    //     int divisors = 0;
    //     for (long i = 1; i <= number; i++) {
    //         divisors += (number % i == 0L) ? 1 : 0;
    //     }
    //     return (divisors >= divisorsNumber);
    // }

    // private void prinTriangles()
    // {
    //     long i = 1L;
    //     for (Long x : triangles) {
    //         System.out.printf("%1$d: %2$d\n", i, x);
    //         i++;
    //     }
    // }
}
